
def is_empty(board):
    for y in range(8):
        for x in range(8):
            if board[y][x] != " ":
                return False

    return True

def is_bounded(board, y_end, x_end, length, d_y, d_x):
   #check edge diagonals, horizontals, verticals
    x_end_is_0 = False
    x_end_is_7 = False
    y_end_is_7 = False
    x_start_is_0 = False
    y_start_is_0 = False
    x_start_is_7 = False
    y_start_is_7 = False

    if x_end == 0:
      x_end_is_0 = True
    if y_end == 7:
      y_end_is_7 = True
    if x_end == 7:
      x_end_is_7 = True
    if (y_end - (d_y * (length-1))) == 0:
      y_start_is_0 = True
    if (x_end - (d_x * (length-1))) == 0:
      x_start_is_0 = True
    if (y_end - (d_y * (length-1))) == 7:
      y_start_is_7 = True
    if (x_end - (d_x * (length-1))) == 7:
      x_start_is_7 = True

    if y_start_is_0 == True and x_start_is_0 or y_start_is_0 == True and x_start_is_7 == True or y_start_is_7 == True and x_start_is_0 == True:
      if board[y_end + d_y][x_end + d_x] == " ":
        return 'SEMIOPEN'
      else:
        return 'CLOSED'

    if y_end_is_7 == True and x_end_is_0 == True:
      if board[y_end - (d_y*length)][x_end - (d_x*length)] == " ":
        return 'SEMIOPEN'
      else:
        return 'CLOSED'

    if y_end_is_7 == True and x_end_is_7 == True:
      if board[y_end - (d_y*length)][x_end - (d_x*length)] == " ":
        return 'SEMIOPEN'
      else:
        return 'CLOSED'

    if x_end_is_7 == True:
      if d_x != 0:
        if board[y_end - (d_y*length)][x_end - (d_x*length)] == " ":
          return 'SEMIOPEN'
        else:
          return 'CLOSED'

    if y_start_is_0 == True:
      if d_y != 0:
        if board[y_end + d_y][x_end + d_x] == " ":
          return 'SEMIOPEN'
        else:
          return 'CLOSED'

    if x_start_is_0 == True:
      if d_x != 0:
        if board[y_end + d_y][x_end + d_x] == " ":
          return 'SEMIOPEN'
        else:
          return 'CLOSED'

    if y_end_is_7 == True:
      if d_y != 0:
        if board[y_end - (d_y*length)][x_end - (d_x*length)] == " ":
          return 'SEMIOPEN'
        else:
          return 'CLOSED'


    if x_end_is_0 == True:
      if d_x != 0:
        if board[y_end - (d_y*length)][x_end - (d_x*length)] == " ":
          return 'SEMIOPEN'
        else:
          return 'CLOSED'

    # check rest of the possibilities (aka ones that don't touch a border except for one special case we check)
    # checks diagonally, horrizontally and vertically
    if d_x < 0:
        if x_end - (d_x *(length - 1)) == 7:
            if board[y_end + d_y][x_end + d_x] != " ":
                return 'CLOSED'
            else:
                return 'SEMIOPEN'
        if board[y_end + d_y][x_end + d_x] != " ":
                return 'SEMIOPEN'

    if board[y_end - (d_y * length)][x_end - (d_x * length)] != " ":
        if board[y_end + d_y][x_end + d_x] != " ":
            return 'CLOSED'
        else:
            return 'SEMIOPEN'
    if board[y_end + d_y][x_end + d_x] != " ":
            return 'SEMIOPEN'

    return 'OPEN'

def detect_row(board, col, y_start, x_start, length, d_y, d_x):
    count = 0
    open_seq_count = 0
    semi_open_seq_count = 0
    y = y_start
    x = x_start
    while y < 8 and x < 8:
        if board[y][x] == col:
            count += 1
        elif board[y][x] != col:
            if count == length:
                status = is_bounded(board, (y - d_y), (x - d_x), length, d_y, d_x)
                if status == 'OPEN':
                    open_seq_count += 1
                if status == 'SEMIOPEN':
                    semi_open_seq_count += 1
            count = 0

        x = x + d_x
        y = y + d_y

    if count == length:
        status = is_bounded(board, (y - d_y), (x - d_x), length, d_y, d_x)
        if status == 'OPEN':
            open_seq_count += 1
        if status == 'SEMIOPEN':
            semi_open_seq_count += 1

    return open_seq_count, semi_open_seq_count

def detect_rows(board, col, length):

    open_seq_count, semi_open_seq_count = 0, 0

    #horizontal
    y_start = 0
    x_start = 0
    while y_start < 8:
      d_x = 1
      d_y = 0
      ans1, ans2 = detect_row(board, col, y_start, x_start, length, d_y, d_x)
      open_seq_count += ans1
      semi_open_seq_count += ans2
      y_start += 1

    #Vertical
    y_start = 0
    x_start = 0
    while x_start < 8:
      d_y = 1
      d_x = 0
      ans1, ans2 = detect_row(board, col, y_start, x_start, length, d_y, d_x)
      open_seq_count += ans1
      semi_open_seq_count += ans2
      x_start += 1

    # diagonal left to right
    y_start = 0
    x_start = 0
    while x_start < 8:
      d_y = 1
      d_x = 1
      ans1, ans2 = detect_row(board, col, y_start, x_start, length, d_y, d_x)
      open_seq_count += ans1
      semi_open_seq_count += ans2
      x_start += 1

    y_start = 1
    x_start = 0
    while y_start < 8:
      d_y = 1
      d_x = 1
      ans1, ans2 = detect_row(board, col, y_start, x_start, length, d_y, d_x)
      open_seq_count += ans1
      semi_open_seq_count += ans2
      y_start += 1

    # diagonal right to left
    y_start = 0
    x_start = 7
    while x_start < 0:
      d_x = -1
      d_y = 1
      ans1, ans2 = detect_row(board, col, y_start, x_start, length, d_y, d_x)
      open_seq_count += ans1
      semi_open_seq_count += ans2
      x_start -= 1

    y_start = 1
    x_start = 7
    while y_start < 8:
      d_x = -1
      d_y = 1
      ans1, ans2 = detect_row(board, col, y_start, x_start, length, d_y, d_x)
      open_seq_count += ans1
      semi_open_seq_count += ans2
      y_start += 1

    return open_seq_count, semi_open_seq_count

def search_max(board):
    temp_score = 0
    max_score = -100000
    for y in range(8):
        for x in range(8):
            if board[y][x] == " ":
                board[y][x] = "b"
                temp_score = score(board)
                board[y][x] = " "
            if temp_score > max_score:
                max_score = temp_score
                move_y = y
                move_x = x

    return move_y, move_x

def score(board):
    MAX_SCORE = 100000

    open_b = {}
    semi_open_b = {}
    open_w = {}
    semi_open_w = {}

    for i in range(2, 6):
        open_b[i], semi_open_b[i] = detect_rows(board, "b", i)
        open_w[i], semi_open_w[i] = detect_rows(board, "w", i)


    if open_b[5] >= 1 or semi_open_b[5] >= 1:
        return MAX_SCORE

    elif open_w[5] >= 1 or semi_open_w[5] >= 1:
        return -MAX_SCORE

    return (-10000 * (open_w[4] + semi_open_w[4])+
            500  * open_b[4]                     +
            50   * semi_open_b[4]                +
            -100  * open_w[3]                    +
            -30   * semi_open_w[3]               +
            50   * open_b[3]                     +
            10   * semi_open_b[3]                +
            open_b[2] + semi_open_b[2] - open_w[2] - semi_open_w[2])


def is_win(board):
    #horizontal win
    for y in range(8):
        for x in range(2, 5):
            if board[y][x] != " ":
                if board[y][x] == board[y][x-1] and board[y][x-1] == board[y][x-2] and board[y][x-2] == board[y][x+1] and board[y][x+1] == board[y][x+2]:
                    w_colour = board[y][x]
                    if w_colour == "b":
                        return 'Black won'
                    if w_colour == "w":
                        return 'White won'

    #vertical win
    for y in range(2, 5):
        for x in range(8):
            if board[y][x] != " ":
                if board[y][x] == board[y-1][x] and board[y-1][x] == board[y-2][x] and board[y-2][x] == board[y+1][x] and board[y+1][x] == board[y+2][x]:
                    w_colour = board[y][x]
                    if w_colour == "b":
                        return 'Black won'
                    if w_colour == "w":
                        return 'White won'

    #diagonal win
    for y in range(2, 5):
        for x in range(2, 5):
            if board[y][x] != " ":
                if board[y][x] == board[y-1][x-1] and board[y-1][x-1] == board[y-2][x-2] and board[y-2][x-2] == board[y+1][x+1] and board[y+1][x+1] == board[y+2][x+2] or board[y][x] == board[y-1][x+1] and board[y-1][x+1] == board[y-2][x+2] and board[y-2][x+2] == board[y+1][x-1] and board[y+1][x-1] == board[y+2][x-2]:
                    w_colour = board[y][x]
                    if w_colour == "b":
                        return 'Black won'
                    if w_colour == "w":
                        return 'White won'

    #Draw
    count = 0
    for y in range(8):
        for x in range(8):
            if board[y][x] != " ":
                count += 1
    if count == 64:
        return 'Draw'

    #continue playing is returned if no win conditions met and no draw
    return 'Continue playing'


def print_board(board):

    s = "*"
    for i in range(len(board[0])-1):
        s += str(i%10) + "|"
    s += str((len(board[0])-1)%10)
    s += "*\n"

    for i in range(len(board)):
        s += str(i%10)
        for j in range(len(board[0])-1):
            s += str(board[i][j]) + "|"
        s += str(board[i][len(board[0])-1])

        s += "*\n"
    s += (len(board[0])*2 + 1)*"*"

    print(s)


def make_empty_board(sz):
    board = []
    for i in range(sz):
        board.append([" "]*sz)
    return board



def analysis(board):
    for c, full_name in [["b", "Black"], ["w", "White"]]:
        print("%s stones" % (full_name))
        for i in range(2, 6):
            open, semi_open = detect_rows(board, c, i);
            print("Open rows of length %d: %d" % (i, open))
            print("Semi-open rows of length %d: %d" % (i, semi_open))



def play_gomoku(board_size):
    board = make_empty_board(board_size)
    board_height = len(board)
    board_width = len(board[0])

    while True:
        print_board(board)
        if is_empty(board):
            move_y = board_height // 2
            move_x = board_width // 2
        else:
            move_y, move_x = search_max(board)

        print("Computer move: (%d, %d)" % (move_y, move_x))
        board[move_y][move_x] = "b"
        print_board(board)
        analysis(board)

        game_res = is_win(board)
        if game_res in ["White won", "Black won", "Draw"]:
            return game_res





        print("Your move:")
        move_y = int(input("y coord: "))
        move_x = int(input("x coord: "))
        board[move_y][move_x] = "w"
        print_board(board)
        analysis(board)

        game_res = is_win(board)
        if game_res in ["White won", "Black won", "Draw"]:
            return game_res


if __name__ == '__main__':
    play_gomoku(8)
